openapi: 3.0.0
x-stoplight:
  id: cb448dd0bdc83
info:
  title: Deichwave Control API on Stoplight
  version: '0.2'
  description: 'Control sound effects, music playback and disco-lights on a Deichwave instance, using a single API.'
  contact:
    name: dulli
    url: 'https://github.com/dulli/deichwave'
  license:
    name: ' AGPL-3.0'
    url: 'https://github.com/dulli/deichwave/blob/main/LICENSE.md'
servers:
  - url: 'http://localhost:3000/api/v0'
    description: Local
  - description: Test
    url: 'http://192.168.188.20:3000/api/v0'
paths:
  /sounds:
    get:
      summary: List all sounds
      tags:
        - sounds
      responses:
        '200':
          $ref: '#/components/responses/SoundList'
      operationId: get-sounds
      description: List all sounds
    parameters: []
  '/sounds/{sound}':
    get:
      summary: Get sound details
      tags:
        - sounds
      operationId: get-sounds-sound
      description: 'Retrieve more info about a sound, including links to possible actions.'
      responses:
        '200':
          $ref: '#/components/responses/SoundDetails'
    parameters:
      - $ref: '#/components/parameters/Sound'
  '/sounds/{sound}/play':
    parameters:
      - $ref: '#/components/parameters/Sound'
    post:
      summary: Play a sound
      tags:
        - sounds
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: post-sounds-play
      description: Play a sound
  '/sounds/{sound}/loop':
    parameters:
      - $ref: '#/components/parameters/Sound'
    post:
      summary: Loop a sound
      tags:
        - sounds
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: post-sounds-loop
      description: Loop a sound
  '/sounds/{sound}/unloop':
    parameters:
      - $ref: '#/components/parameters/Sound'
    post:
      summary: Stop a looped sound
      tags:
        - sounds
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: post-sounds-unloop
      description: Stop a looped sound
  /music:
    get:
      summary: List all playlists
      tags:
        - music
      responses:
        '200':
          $ref: '#/components/responses/EntityList'
      operationId: get-music
      description: List all playlists
    parameters: []
  '/music/{playlist}':
    parameters:
      - $ref: '#/components/parameters/Playlist'
    get:
      summary: Get playlist details
      tags:
        - music
      responses:
        '200':
          $ref: '#/components/responses/EntityList'
        '404':
          $ref: '#/components/responses/EntityList'
      operationId: get-music-playlist
      description: 'Retrieve more info about a playlist, including all songs and links to possible actions.'
  '/music/{playlist}/position':
    parameters:
      - name: playlist
        in: path
        schema:
          type: string
          example: Entspannte Musik
        description: Name of a playlist
        required: true
    get:
      summary: Get position in playlist
      operationId: get-music-playlist-position
      responses:
        '200':
          $ref: '#/components/responses/PlaylistPosition'
      description: Get the current position in a playlist
      tags:
        - music
  '/music/{playlist}/chance':
    parameters:
      - name: playlist
        in: path
        schema:
          type: string
          example: Entspannte Musik
        description: Name of a playlist
        required: true
    get:
      summary: Get playlist chance
      operationId: get-music-playlist-chance
      responses:
        '200':
          $ref: '#/components/responses/PlaylistChance'
      description: Get the chance at which a playlist will be chosen next
      tags:
        - music
  '/music/{playlist}/skip':
    parameters:
      - $ref: '#/components/parameters/Playlist'
    post:
      summary: Skip the next song in a playlist
      tags:
        - music
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: post-music-playlist-skip
      description: Remove the next song in a playlist from the queue
  /music/playing:
    parameters: []
    get:
      summary: Get now playing info
      operationId: get-music-playing
      responses:
        '200':
          $ref: '#/components/responses/SongInfo'
      description: Gather info about current song
      tags:
        - music
  /music/play:
    post:
      summary: Start music playback
      tags:
        - music
      responses:
        '200':
          description: OK
      operationId: post-music-play
      description: Start the music
  /music/pause:
    post:
      summary: Pause music playback
      tags:
        - music
      responses:
        '200':
          description: OK
      operationId: post-music-pause
      description: Pause the music
    parameters: []
  /music/stop:
    post:
      summary: Stop music playback
      tags:
        - music
      responses:
        '200':
          description: OK
      operationId: post-music-stop
      description: Stop the music
    parameters: []
  /music/next:
    post:
      summary: Play the next track
      tags:
        - music
      responses:
        '200':
          description: OK
      operationId: post-music-next
      description: Skip to the next track
  /lights:
    get:
      summary: List all light effects
      tags:
        - lights
      responses:
        '200':
          $ref: '#/components/responses/EntityList'
      operationId: get-lights
      description: List all light effects
    parameters: []
  '/lights/{effect}':
    get:
      summary: Get light effect details
      tags:
        - lights
      responses:
        '200':
          $ref: '#/components/responses/EntityList'
      operationId: get-lights-effect
      description: 'Retrieve more info about a light effect, including all songs and links to possible actions.'
    parameters:
      - $ref: '#/components/parameters/LightEffect'
  '/lights/{effect}/start':
    parameters:
      - $ref: '#/components/parameters/LightEffect'
    post:
      summary: Start a light effect
      tags:
        - lights
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: post-lights-start
      description: 'Retrieve more info about a light effect, including links to possible actions.'
  '/lights/{effect}/stop':
    parameters:
      - $ref: '#/components/parameters/LightEffect'
    post:
      summary: Stop a light effect
      tags:
        - lights
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: post-lights-stop
      description: Stop a light effect
      parameters: []
  /lights/clear:
    post:
      summary: Stop all light effects
      tags:
        - lights
      responses:
        '200':
          description: OK
      operationId: post-lights-clear
      description: Stop all light effects
    parameters: []
  /profiles:
    get:
      summary: List all configuration profiles
      responses:
        '200':
          $ref: '#/components/responses/EntityList'
      operationId: get-profiles
      description: List all configuration profiles
      tags:
        - profiles
    parameters: []
  '/profiles/{profile}/set':
    parameters:
      - schema:
          type: string
        name: profile
        in: path
        required: true
    post:
      summary: Apply a profile
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: post-profiles-set
      description: Update the configuration according to a profile
      tags:
        - profiles
  /system/volume:
    get:
      summary: Get volume
      tags:
        - system
        - audio
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioLevelModel'
      operationId: get-system-volume
      description: Get the current volume
    post:
      summary: Set Volume
      operationId: post-system-volume
      responses:
        '200':
          description: OK
      description: Set the current volume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioLevelModel'
        description: ''
      tags:
        - system
        - audio
  '/system/volume/{delta}':
    post:
      summary: Change Volume
      operationId: post-system-volume-delta
      responses:
        '200':
          description: OK
      description: Change the current volume
      tags:
        - system
        - audio
    parameters:
      - schema:
          type: integer
          minimum: -100
          maximum: 100
        name: delta
        in: path
        required: true
  /system/intensity:
    get:
      summary: Get Intensity
      tags:
        - system
        - audio
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioLevelModel'
      operationId: get-system-intensity
      description: Get the current intensity
    post:
      summary: Set Intensity
      operationId: post-system-intensity
      responses:
        '200':
          description: OK
      description: Set the current intensity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioLevelModel'
        description: ''
      tags:
        - system
        - audio
    parameters: []
  '/system/intensity/{delta}':
    post:
      summary: Change Intensity
      operationId: post-system-intensity-delta
      responses:
        '200':
          description: OK
      description: Change the current intensity
      tags:
        - system
        - audio
    parameters:
      - schema:
          type: integer
          minimum: -100
          maximum: 100
        name: delta
        in: path
        required: true
  /ping:
    get:
      summary: Ping
      tags:
        - system
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
            application/xml:
              schema:
                type: string
                default: Pong
                enum:
                  - Pong
                example: Pong
                readOnly: true
      operationId: get-ping
      description: Ping the API
  '/shell/{command}':
    parameters:
      - schema:
          type: string
        name: command
        in: path
        required: true
    post:
      summary: Shell Command
      operationId: post-shell-command
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      description: Run a pre-defined shell command by name
      tags:
        - system
components:
  schemas:
    SoundActionsModel:
      title: SoundActionsModel
      type: object
      properties:
        play:
          type: string
          minLength: 1
          example: /sound/Abfahrt/play
          readOnly: true
        loop:
          type: string
          minLength: 1
          example: /sound/Abfahrt/loop
          readOnly: true
        unloop:
          type: string
          minLength: 1
          example: /sound/Abfahrt/unloop
          readOnly: true
      required:
        - play
        - loop
        - unloop
      x-examples:
        Example:
          play: /sound/Abfahrt/play
          loop: /sound/Abfahrt/loop
          unloop: /sound/Abfahrt/unloop
      x-tags:
        - sounds
      x-stoplight:
        id: 19691b77528fb
    SoundDetailsModel:
      title: SoundDetailsModel
      type: object
      properties:
        name:
          type: string
          minLength: 1
          example: Abfahrt
          readOnly: true
        buffer-count:
          type: integer
          multipleOf: 1
          minimum: 1
          example: 1
          readOnly: true
        links:
          $ref: '#/components/schemas/SoundActionsModel'
      required:
        - name
        - buffer-count
        - links
      x-tags:
        - sounds
      x-stoplight:
        id: 1633671ded12c
    AudioLevelModel:
      title: AudioLevelModel
      type: object
      properties:
        level:
          type: integer
          minimum: 0
          maximum: 100
          example: 50
      required:
        - level
      x-tags:
        - audio
      x-stoplight:
        id: 5e00f270711fe
  responses:
    EntityList:
      description: List of entities
      content:
        application/json:
          schema:
            type: object
            properties:
              entity:
                type: array
                uniqueItems: true
                items:
                  type: string
                  writeOnly: true
                readOnly: true
            required:
              - entity
          examples:
            songs:
              value:
                entity:
                  - ABBA - Dancing Queen
                  - ABBA - Gimme Gimme Gimme A Man After Midnight
                  - ABBA - Mamma Mia
    SoundDetails:
      description: Response detailing infos about a sound and possible actions
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                name: Abfahrt
                buffer-count: 1
                links:
                  play: /sounds/1/play
                  loop: /sounds/1/loop
                  unloop: /sounds/1/unloop
            properties:
              name:
                type: string
                minLength: 1
                example: Abfahrt
                readOnly: true
              buffer-count:
                type: integer
                multipleOf: 1
                minimum: 1
                example: 1
                readOnly: true
              links:
                $ref: '#/components/schemas/SoundActionsModel'
            required:
              - name
              - buffer-count
              - links
          examples:
            Example:
              value:
                name: Abfahrt
                buffer-count: 1
                links:
                  play: /sound/Abfahrt/play
                  loop: /sound/Abfahrt/loop
                  unloop: /sound/Abfahrt/unloop
    SoundList:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              sounds:
                type: array
                items:
                  $ref: '#/components/schemas/SoundDetailsModel'
    SongInfo:
      description: Details about a song
      content:
        application/json:
          schema:
            type: object
            properties:
              artist:
                type: string
                readOnly: true
              title:
                type: string
                readOnly: true
              image:
                type: string
                readOnly: true
              playlist:
                type: string
            required:
              - artist
              - title
              - playlist
    PlaylistPosition:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              position:
                type: integer
            required:
              - position
    PlaylistChance:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              chance:
                type: integer
            required:
              - chance
  parameters:
    Sound:
      name: sound
      in: path
      required: true
      schema:
        type: string
        example: Abfahrt
      description: Name of a sound file
    Playlist:
      name: playlist
      in: path
      schema:
        type: string
        example: Entspannte Musik
      description: Name of a playlist
      required: true
    LightEffect:
      name: effect
      in: path
      required: true
      description: Name of a light effect
      schema:
        type: string
        example: Polizei
  examples: {}
tags:
  - name: audio
  - name: lights
  - name: music
  - name: sounds
  - name: system
